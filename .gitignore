# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# VSCode
**.code-workspace
server/server/database.db
carla/requirements.txt
carla/scene_layout.py
carla/agents/__init__.py
carla/agents/navigation/__init__.py
carla/agents/navigation/basic_agent.py
carla/agents/navigation/behavior_agent.py
carla/agents/navigation/behavior_types.py
carla/agents/navigation/controller.py
carla/agents/navigation/global_route_planner.py
carla/agents/navigation/local_planner.py
carla/agents/tools/__init__.py
carla/agents/tools/misc.py
examples/automatic_control.py
examples/client_bounding_boxes.py
examples/draw_skeleton.py
examples/dynamic_weather.py
examples/generate_traffic.py
examples/lidar_to_camera.py
examples/manual_control_carsim.py
examples/manual_control_chrono.py
examples/manual_control_steeringwheel.py
examples/manual_control.py
examples/no_rendering_mode.py
examples/open3d_lidar.py
examples/requirements.txt
examples/sensor_synchronization.py
examples/show_recorder_actors_blocked.py
examples/show_recorder_collisions.py
examples/show_recorder_file_info.py
examples/start_recording.py
examples/start_replaying.py
examples/synchronous_mode.py
examples/tutorial.py
examples/vehicle_gallery.py
examples/vehicle_physics.py
examples/visualize_multiple_sensors.py
examples/_out/00001559.png
examples/_out/00001560.png
examples/_out/00001561.png
examples/_out/00001562.png
examples/_out/00001563.png
examples/_out/00001564.png
examples/_out/00001565.png
examples/_out/00001566.png
examples/_out/00001567.png
examples/_out/00001568.png
examples/_out/00001569.png
examples/_out/00001570.png
examples/_out/00001571.png
examples/_out/00001572.png
examples/_out/00001573.png
examples/_out/00001574.png
examples/_out/00001575.png
examples/_out/00001576.png
examples/_out/00001577.png
examples/_out/00001578.png
examples/_out/00001579.png
examples/_out/00001580.png
examples/_out/00001581.png
examples/_out/00001582.png
examples/_out/00001583.png
examples/_out/00001584.png
examples/_out/00001585.png
examples/_out/00001586.png
examples/_out/00001587.png
examples/_out/00001588.png
examples/_out/00001589.png
examples/_out/00001590.png
examples/_out/00023702.png
util/apply_texture.py
util/check_collisions_substepping.py
util/check_lidar_bb.py
util/check_raycast_sensors_determinism.py
util/config.py
util/environment.py
util/extract_spawn_points.py
util/lane_explorer.py
util/osm_to_xodr.py
util/performance_benchmark.py
util/raycast_sensor_testing.py
util/requirements.txt
util/test_connection.py
util/vehicle_physics_tester.py
util/opendrive/TownBig.xodr
